import dwavebinarycsp as dbc

P = 21
bP = "{:06b}".format(P)
print(bP)

csp = dbc.factories.multiplication_circuit(3)

bqm = dbc.stitch(csp, min_classical_gap=.1)

p_vars = ['p0', 'p1', 'p2', 'p3', 'p4', 'p5']
fixed_variables = dict(zip(reversed(p_vars), "{:06b}".format(P)))
fixed_variables = {var: int(x) for(var, x) in fixed_variables.items()}
for var, value in fixed_variables.items():
    bqm.fix_variable(var, value)

from solvers import default_solver
my_solver, my_token = default_solver()

from dwave.system.samplers import DWaveSampler
sampler = DWaveSampler(solver={'qpu': True}) 
_, target_edgelist, target_adjacency = sampler.structure

from dwave.embedding import embed_bqm, unembed_sampleset
from embedding import embeddings

embedding = embeddings[sampler.solver.id]
bqm_embedded = embed_bqm(bqm, embedding, target_adjacency, 3.0)

kwargs = {}
if 'num_reads' in sampler.parameters:
    kwargs['num_reads'] = 50
if 'answer_mode' in sampler.parameters:
    kwargs['answer_mode'] = 'histogram'
response = sampler.sample(bqm_embedded, **kwargs)
response = unembed_sampleset(response, embedding, source_bqm=bqm)

from convert import to_base_ten
sample = next(response.samples(n=1))
dict(sample)
a, b = to_base_ten(sample)
print("Given integer P={}, found factors a={} and b={}".format(P, a, b))
